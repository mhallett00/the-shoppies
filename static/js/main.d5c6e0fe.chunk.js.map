{"version":3,"sources":["components/SearchResultItem.js","components/SearchResults.js","components/NominationEntry.js","components/Nominations.js","components/Banner.js","components/Search.js","components/App.js","serviceWorker.js","index.js"],"names":["SearchResultItem","props","title","year","nominations","nominate","Button","onClick","variant","type","disabled","nomination","getNomination","SearchResults","searchResults","searchParams","movies","map","movie","index","key","Title","Year","NominationEntry","removeNomination","id","className","Nominations","console","log","Array","isArray","Banner","Alert","Search","localStorage","getItem","JSON","parse","useState","terms","results","search","setSearch","useEffect","axios","get","process","then","res","data","catch","e","Form","onSubmit","preventDefault","Group","controlId","Label","InputGroup","Prepend","Text","Control","placeholder","value","onChange","target","length","push","setItem","stringify","splice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.d5c6e0fe.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport \"./SearchResultItem.css\";\n\nfunction SearchResultItem(props) {\n  const { title, year, nominations, nominate } = props;\n\n  const getNomination = (nominations, title, year) => {\n    for (let nomination of nominations) {\n      if (nomination.title === title && nomination.year === year) return true;\n    }\n    return false;\n  };\n\n  return (\n    <>\n      <li>\n        {title} ({year})\n        <Button\n          onClick={() => nominate(title, year)}\n          variant=\"dark\"\n          type=\"submit\"\n          disabled={nominations && getNomination(nominations, title, year)}\n        >\n          Nominate\n        </Button>\n      </li>\n    </>\n  );\n}\n\nexport default SearchResultItem;\n","import React from \"react\";\nimport \"./SearchResults.css\";\nimport SearchResultItem from \"./SearchResultItem\";\n\nfunction SearchResults(props) {\n  const { searchResults, searchParams, nominations, nominate } = props;\n\n  const movies = searchResults\n    ? searchResults.map((movie, index) => {\n        return (\n          <SearchResultItem\n            key={index}\n            title={movie.Title}\n            year={movie.Year}\n            nominations={nominations}\n            nominate={nominate}\n          />\n        );\n      })\n    : \"No Results!\";\n  return (\n    <>\n      <h5>{searchResults && `Results for \"${searchParams}\"`}</h5>\n      <ul>{movies}</ul>\n    </>\n  );\n}\n\nexport default SearchResults;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction NominationEntry(props) {\n  const { title, year, removeNomination, id } = props;\n  return (\n    <li className=\"Movie-entry\">\n      {title} ({year})\n      <Button variant=\"dark\" type=\"submit\" onClick={() => removeNomination(id)}>\n        Unnominate\n      </Button>\n    </li>\n  );\n}\n\nexport default NominationEntry;\n","import React from \"react\";\nimport \"./Nominations.css\";\nimport NominationEntry from \"./NominationEntry\";\n\nfunction Nominations(props) {\n  const { nominations, removeNomination } = props;\n  console.log(\"nominations\", nominations);\n  console.log(Array.isArray(nominations));\n  const movies = nominations\n    ? nominations.map((movie, index) => {\n        return (\n          <NominationEntry\n            key={index}\n            id={index}\n            title={movie.title}\n            year={movie.year}\n            removeNomination={removeNomination}\n          />\n        );\n      })\n    : \"No Nominations!\";\n  return (\n    <>\n      <ul>{movies}</ul>\n    </>\n  );\n}\n\nexport default Nominations;\n","import React from \"react\";\nimport Alert from \"react-bootstrap/Alert\";\n\nfunction Banner() {\n  return (\n    <Alert className=\"nomination-banner\" variant=\"primary\">\n      Congrats! You've nominated at least 5 movies!\n    </Alert>\n  );\n}\n\nexport default Banner;\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport axios from \"axios\";\nimport \"./Search.css\";\nimport SearchResults from \"./SearchResults\";\nimport Nominations from \"./Nominations\";\nimport Banner from \"./Banner\";\n\nfunction Search() {\n  let nominations = localStorage.getItem(\"nominations\")\n    ? JSON.parse(localStorage.getItem(\"nominations\"))\n    : [];\n\n  console.log(Array.isArray(nominations));\n  const [search, setSearch] = useState({\n    terms: \"\",\n    results: [],\n    nominations,\n  });\n\n  console.log(Array.isArray(search.nominations));\n  const handleChange = (e) => {\n    setSearch({ ...search, terms: e.target.value });\n  };\n\n  const nominate = (title, year) => {\n    const nomination = { title, year };\n\n    setSearch({ ...search }, search.nominations.push(nomination));\n    localStorage.setItem(\"nominations\", JSON.stringify(search.nominations));\n  };\n\n  const removeNomination = (id) => {\n    setSearch({ ...search }, search.nominations.splice(id, 1));\n  };\n\n  useEffect(() => {\n    if (search.terms === \"\") return;\n\n    axios\n      .get(\n        `http://www.omdbapi.com/?s=${search.terms}*&apikey=${process.env.REACT_APP_OMDB_API_KEY}`\n      )\n      .then((res) => {\n        setSearch((search) => ({\n          ...search,\n          results: res.data.Search,\n        }));\n      })\n      .catch((e) => console.log(e));\n  }, [search.terms]);\n\n  return (\n    <div className=\"Search\">\n      <div className=\"card search-container\">\n        <Form\n          className=\"card-body search-container-form\"\n          onSubmit={(e) => e.preventDefault()}\n        >\n          <Form.Group controlId=\"title\">\n            <Form.Label>Movie Title</Form.Label>\n            <InputGroup>\n              <InputGroup.Prepend>\n                <InputGroup.Text id=\"inputGroupPrepend\">\n                  <i className=\"fa fa-search\"></i>\n                </InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control\n                type=\"movie-title\"\n                placeholder=\"Search for your Nominee!\"\n                value={search.terms}\n                onChange={handleChange}\n              />\n            </InputGroup>\n          </Form.Group>\n        </Form>\n      </div>\n      <div className=\"nomination-banner\">\n        {search.nominations.length >= 5 && <Banner />}\n      </div>\n      <div className=\"results-nominations\">\n        <div className=\"card search-results\">\n          <SearchResults\n            searchResults={search.results}\n            searchParams={search.terms}\n            nominations={search.nominations}\n            nominate={nominate}\n          />\n        </div>\n        <div className=\"card nominations\">\n          <Nominations\n            nominations={search.nominations}\n            removeNomination={removeNomination}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport Search from \"./Search\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-the-shoppies\">\n        <h1>The Shoppies</h1>\n      </header>\n      <Search />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}